# Multi-user code-server configuration
# Each user gets their own code-server instance on different ports

# WebSocket connection upgrade map
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Server block for handling requests
server {
    listen 80;
    listen [::]:80;
    server_name localhost;  # Use localhost for local development

    # User-specific code-server routing
    # Pattern: /user/{username}/vscode/ -> user's code-server instance
    # Pattern: /user/{username}/jupyter/ -> user's jupyter instance
    
    # Default root redirects to user selection or default instance
    location = / {
        access_log off;
        return 404 "Not found\n";
        add_header Content-Type text/plain;
    }
    
    # User routing pattern for VSCode
    location ~ ^/user/([^/]+)/vscode/(.*)$ {
        set $username $1;
        set $path $2;
        
        # Try to proxy to user-specific upstream, fallback to default
        proxy_pass http://vscode_$username/$path$is_args$args;
        
        # Standard proxy headers
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (essential for code-server)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection upgrade;
        proxy_set_header Accept-Encoding gzip;
        
        # Disable buffering for real-time communication
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Increase timeouts for long-running operations
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle large file uploads
        client_max_body_size 100M;
        
        # Add user context headers
        proxy_set_header X-User $username;
        proxy_set_header X-Service "vscode";
    }

    # Jupyter routing
    
    
    # Status endpoint for monitoring
    location /status {
        access_log off;
        return 200 '{"status":"ok","service":"nginx-multi-user"}';
        add_header Content-Type application/json;
    }
}


upstream jupyter_testuser {
    server 127.0.0.1:8889 max_fails=3 fail_timeout=30s;
    # Use least_conn for better load distribution
    least_conn;
    
    # Enable health checks
    zone jupyter_testuser 64k;
    keepalive 32;
}

